@model PageViewModel
@{
    ViewBag.Title = Model.Title;
}
@section Breadcrumb {
    <li>@Html.ActionLink("Projects", "AllPages", "Pages")</li>
    <li>@ViewBag.Title</li>
}

@section PageToolbar
{
    @* This is rendered by an action (and not a partial/extension method) for future donut caching *@
    @Html.Action("PageToolBar", "Wiki", new { id = Model.Id })
}

@*@section ViewHistoryLink
    {
        @Html.ActionLink(SiteStrings.Navigation_ViewHistory, "History", "Pages", new { id = Model.Id }, null)
    }*@
<section id="global__content">
    <div class="row">
        <div id="global__body_content" class="small-12 medium-8 columns body_content">
            <h1>@Model.Title <span class="label label-stage label-@Model.ProjectStatus.ToLower()">@Model.ProjectStatus.ToUpper()</span></h1>

            @MvcHtmlString.Create(Model.ContentAsHtml)

            @Html.Action("RelatedRelationships", "Wiki", new { id = Model.Id })
        </div>

        <div id="global__sidebar" class="small-12 medium-4 columns">
            <aside>
                <div class="sidebar_content">
                    <h4>Project owner</h4>
                    <p>@MvcHtmlString.Create(Model.OrgContactDetails.OrgName)</p>

                    <h4>
                        @if (!Model.ProjectEstimatedTime)
                    { <text>Estimated </text> }Dates
                    </h4>
                    <p>@MvcHtmlString.Create(Model.ProjectStart.ToLongDateString()) to @MvcHtmlString.Create(Model.ProjectEnd.ToLongDateString())</p>

                    <h4>Last modified</h4>
                    <p>@Model.ModifiedOn.ToLongDateString() by @Model.ModifiedBy @Html.ActionLink(SiteStrings.Navigation_ViewHistory, "History", "Pages", new { id = Model.Id }, new { @class = "btn btn-link" })</p>
                </div>
            </aside>
        </div>
    </div><!-- Foundation .row end -->
</section>

@*@section RelatedRelationships
    {
        @* This is rendered by an action (and not a partial/extension method) for future donut caching * @
        @Html.Action("RelatedRelationships", "Wiki", new { id = Model.Id })
    }*@

@*@section PageDetailsFooter
    {
        @SiteStrings.Shared_LastModified @Model.ModifiedOn.ToLongDateString().
    }*@

@section PluginHead
{
    <!-- Plugins -->
    @Html.Raw(Model.PluginHeadHtml)
    <!-- End plugins head -->
}

@section PluginPreContainer
{
    @MvcHtmlString.Create(Model.PluginPreContainer)
}

@section PluginPostContainer
{
    @MvcHtmlString.Create(Model.PluginPostContainer)
}

@*@section PluginFooter
    {
        @MvcHtmlString.Create(Model.PluginFooterHtml)
    }*@
